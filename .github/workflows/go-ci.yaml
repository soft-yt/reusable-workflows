name: Go CI (Reusable)

on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: false
        type: string
        default: '1.24'
      working-directory:
        description: 'Working directory for Go project'
        required: false
        type: string
        default: '.'
      run-integration-tests:
        description: 'Run integration tests'
        required: false
        type: boolean
        default: false
      coverage-threshold:
        description: 'Minimum coverage threshold %'
        required: false
        type: number
        default: 70

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          cache: true
          cache-dependency-path: ${{ inputs.working-directory }}/go.sum

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run unit tests
        run: go test -v -race -short -coverprofile=coverage.out -covermode=atomic ./...

      - name: Run integration tests
        if: ${{ inputs.run-integration-tests }}
        run: go test -v -race -tags=integration ./tests/...

      - name: Check coverage
        run: |
          coverage=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage: $coverage%"
          if (( $(echo "$coverage < ${{ inputs.coverage-threshold }}" | bc -l) )); then
            echo "❌ Coverage $coverage% is below threshold ${{ inputs.coverage-threshold }}%"
            exit 1
          fi
          echo "✅ Coverage $coverage% meets threshold ${{ inputs.coverage-threshold }}%"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ inputs.working-directory }}/coverage.out
          flags: unittests
        continue-on-error: true

  lint:
    name: Lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: ${{ inputs.working-directory }}
          args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint]
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
          cache: true

      - name: Build binary
        run: |
          mkdir -p bin
          go build -ldflags="-s -w" -o bin/app .

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: go-binary
          path: ${{ inputs.working-directory }}/bin/app
          retention-days: 7
