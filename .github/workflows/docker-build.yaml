name: Docker Build and Push (Reusable)

on:
  workflow_call:
    inputs:
      registry:
        description: 'Container registry'
        required: false
        type: string
        default: 'ghcr.io'
      image-name:
        description: 'Image name (defaults to repository name)'
        required: false
        type: string
        default: ''
      dockerfile:
        description: 'Path to Dockerfile'
        required: false
        type: string
        default: 'Dockerfile'
      context:
        description: 'Build context'
        required: false
        type: string
        default: '.'
      platforms:
        description: 'Target platforms'
        required: false
        type: string
        default: 'linux/amd64,linux/arm64'
      push:
        description: 'Push image to registry'
        required: false
        type: boolean
        default: true
      build-args:
        description: 'Build arguments (newline separated)'
        required: false
        type: string
        default: ''
    outputs:
      image-tags:
        description: 'Built image tags'
        value: ${{ jobs.build.outputs.tags }}
      image-digest:
        description: 'Image digest'
        value: ${{ jobs.build.outputs.digest }}

permissions:
  contents: read
  packages: write
  id-token: write

jobs:
  build:
    name: Build and Push
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: ${{ inputs.push }}
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Determine image name
        id: image-name
        run: |
          if [ -n "${{ inputs.image-name }}" ]; then
            echo "name=${{ inputs.registry }}/${{ inputs.image-name }}" >> $GITHUB_OUTPUT
          else
            echo "name=${{ inputs.registry }}/${{ github.repository }}" >> $GITHUB_OUTPUT
          fi

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.image-name.outputs.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.dockerfile }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ inputs.platforms }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: ${{ inputs.build-args }}

      - name: Generate artifact attestation
        if: ${{ inputs.push }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.image-name.outputs.name }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

      - name: Image summary
        if: ${{ inputs.push }}
        run: |
          echo "## Docker Image Built 🐳" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.image-name.outputs.name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Tags" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
